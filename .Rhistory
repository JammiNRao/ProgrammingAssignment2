local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
# Statistics Week 2 assigment
#read in the data file
test2 <- read.table("lab2.txt", header = T)
dim(test2)
nrow(test2)
ncol(test2)
#Object Types
class(test2)
class (test2$SR)
# summary statistics
# Q3 overall mean
mean(test2$SR)
#Q4 overall variance
var(test2$SR)
edit
edit(test2)
# Q5 pre and posttest subsets
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
test2_Posttest <- subset(test2, test2[, 3] ++ "post")
test2_Posttest
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
test2_Posttest <- subset(test2, test2[, 3] ++ "post")
test2_Posttest
q()
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
test2_Posttest <- subset(test2, test2[, 3] == "post")
test2_Posttes
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
test2_Posttest <- subset(test2, test2[, 3] == "post")
test2_Posttest
mean(test2_Pretest$SR)
sd(test2_Posttest$SR)
# Q6 median SR for all subj at posttest
median(test2_Posttest$SR)
? mean
describeBy(test2_Posttest, test2_Posttest$condition)
describe(test2)
install.packages("sm")
library(sm)
help(sm)
describe(test2)
Describe(test2)
describe(impact)
install.packages("psych")
library(psych)
describe(test2)
describeby(test2_Posttest, test2_Posttest$condition)
describeBy(test2_Posttest, test2_Posttest$condition)
var(test2$SR)
var(test2_Posttest$SR)
describe(test2)
describeBy(test2_Posttest, test2_Posttest$condition)
help(sm)
help(psych)
hist(test2_Pretest[, 4] xlab = "WM")
hist(test2_Pretest[, 4], xlab = "WM")
hist(test2_Pretest[, 4], xlab = "DS")
hist(test2_Pretest[, 4], xlab = "PE")
help hist()
? hist()
hist(test2_Pretest[, 4], breaks="condition")
hist(test2_Pretest[, 4], xlab = "WM")
? subset()
WMPre <- subset(test2, condition =="WM", time == "pre")
WMPre
edit WMPre
edit "WMPre"
edit test2
test2
WMPre <- subset(test2, condition =="WM")
WMPre
WMPre <- subset(test2, condition =="WM" and time="pre")
WMPre <- subset(test2, condition =="WM")Wm <- subset(test2, condition == "WM"
WM <- subset(test2, condition =="WM")
PE <- subset (test2, condition == "PE")
DS <- subset(test2, condition == "DS")
WM <- subset(test2, condition =="WM")
PE <- subset (test2, condition == "PE")
DS <- subset(test2, condition == "DS")
WMPre <- subset(WM, time == "pre")
WMPost <- subset(WM, time == "post")
PEPre <- subset(PE, time == "pre")
PEPost <- subset(PE, time == "post")
DSPre <- subset(DS, time == "pre")
DSPost <- subset(DS, time == "post"
hist(WMPre$SR)
hist(WMPost$SR)
hist(PEPre$SR)
hist(PEPost$SR)
hist(DSPre$SR)
hist(DSPost$SR)
WM <- subset(test2, condition =="WM")
PE <- subset (test2, condition == "PE")
DS <- subset(test2, condition == "DS")
WMPre <- subset(WM, time == "pre")
WMPost <- subset(WM, time == "post")
PEPre <- subset(PE, time == "pre")
PEPost <- subset(PE, time == "post")
DSPre <- subset(DS, time == "pre")
DSPost <- subset(DS, time == "post")
hist(WMPre$SR)
hist(WMPost$SR)
hist(PEPre$SR)
hist(PEPost$SR)
hist(DSPre$SR)
hist(DSPost$SR)
WM <- subset(test2, condition =="WM")
PE <- subset (test2, condition == "PE")
DS <- subset(test2, condition == "DS")
WMPre <- subset(WM, time == "pre")
WMPost <- subset(WM, time == "post")
PEPre <- subset(PE, time == "pre")
PEPost <- subset(PE, time == "post")
DSPre <- subset(DS, time == "pre")
DSPost <- subset(DS, time == "post")
par(mfrow = c(2,3))
hist(WMPre$SR)
hist(WMPost$SR)
hist(PEPre$SR)
hist(PEPost$SR)
hist(DSPre$SR)
hist(DSPost$SR)
par(mfrow = c(2,3))
hist(WMPre$SR)
hist(WMPost$SR)
hist(PEPre$SR)
hist(PEPost$SR)
hist(DSPre$SR)
hist(DSPost$SR)
mean(DSPre$SR)
mean(DSPost$SR)
mean(PEPost$SR)
mean(PEPre$SR)
mean(WMpre$SR)
mean(WMPre$SR)
mean(WMPost$SR)
mean(DSPost$SR) - mean(DSPre$SR)
# Statistics Week 2 assigment
install.packages("psych")
library(psych)
install.packages("sm")
library(sm)
#read in the data file
test2 <- read.table("lab2.txt", header = T)
dim(test2)
nrow(test2)
ncol(test2)
#Object Types
class(test2)
class (test2$SR)
# summary statistics
# Q3 overall mean
mean(test2$SR)
#Q4 overall variance
var(test2$SR)
# Q5 pre and posttest subsets
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
# Statistics Week 2 assigment
install.packages("psych")
library(psych)
install.packages("sm")
library(sm)
#read in the data file
test2 <- read.table("lab2.txt", header = T)
dim(test2)
nrow(test2)
ncol(test2)
#Object Types
class(test2)
class (test2$SR)
# summary statistics
# Q3 overall mean
mean(test2$SR)
#Q4 overall variance
var(test2$SR)
# Q5 pre and posttest subsets
test2_Pretest <- subset(test2, test2[, 3]=="pre")
test2_Pretest
test2_Posttest <- subset(test2, test2[, 3] == "post")
test2_Posttest
# Q 5 and 6
mean(test2_Pretest$SR)
sd(test2_Posttest$SR)
# Q7 median SR for all subj at posttest
median(test2_Posttest$SR)
# Q8 which group has the highest mean at post test
describeBy(test2_Posttest, test2_Posttest$condition)
# Q9 6 histograms for 6 subets which is most normal
WM <- subset(test2, condition =="WM")
PE <- subset (test2, condition == "PE")
DS <- subset(test2, condition == "DS")
WMPre <- subset(WM, time == "pre")
WMPost <- subset(WM, time == "post")
PEPre <- subset(PE, time == "pre")
PEPost <- subset(PE, time == "post")
DSPre <- subset(DS, time == "pre")
DSPost <- subset(DS, time == "post")
par(mfrow = c(2,3))
hist(WMPre$SR)
hist(WMPost$SR)
hist(PEPre$SR)
hist(PEPost$SR)
hist(DSPre$SR)
hist(DSPost$SR)
# Q10 which group showed the biggest gain in SR
mean(DSPost$SR) - mean(DSPre$SR)
mean(WMPost$SR) - mean(WMPre$SR)
mean(PEPost$SR) - mean(PEPre$SR)
names(data)
q()
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
bye()
q()
getwd()
getwd()
load("~/.RData")
getwd()
setwd
list
a <- makevector(c(1:100))
source("Cacheing.R")
getwd(0)
getwd()
setwd("C:/Users/Gorway Global/Google Drive/Coursera/Data Science Specialisation/My_R_Wkg_Dir")
source("Cacheing.R")
a <- makevector(c(1:100))
class(a)
a$get
class(a$get)
a$get()
a$getmean()
b <- cachemean(a)
b
b<-cachemean(a)
source("Cacheing.R")
a
class(a)
a&get()
a$get()
b
b <-cachemean(a)
source("Cacheing.R")
b <-cachemean(a)
a@getmean()
a
a$get()
a$getmean()
b
b <- cachemean(a)
b
c <- b
c
b$setmean()
class(b)
class(a)
class(c)
a&setmean(2)
setwd("C:/Users/Gorway Global/Google Drive/Coursera/Data Science Specialisation/GitHubLocal/ProgrammingAssignment2")
cource("cachematriux.R")
source("cachematriux.R")
getwd()
setwd("C:/Users/Gorway Global/Google Drive/Coursera/Data Science Specialisation/GitHubLocal/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
class(a)
a&get()
a$get()
cacheSolve(a)
b <- cachesolve(a)
b <- cacheSolve(a)
b
a%*%b
class(a)
class[1]
a
m1 <- matrix(1:4,2)
cacheSolve(m1)
m1$get()
m1 <- makeCahceMatrix(matrix(1:4,2))
m1 <- makeCacheMatrix(matrix(1:4,2))
m1
m1$get()
p <- m1$get()
p
cacheSolve(m1)
cacheSolve(m1)
q <- cacheSolve(m1)
r <- p%*%p
r
p
q
solve(matrix(1:4,2))
p
p%*%solve(p)
p
q
p%*%q
r <- p%*%q
r
m1 <- makeCacheMatrix(matrix(1:10,2,5))
m1
m1$set()
m1 <- makeCacheMatrix(matrix(1:10,2,5))
class(m1)
p <- matrix(1:10,2,5)
p
p <- matrix(1:16,4)
p
q <- cacheSolve(p)
a <- makeCacheMatrix(p)
class(a)
q <- cacheSolve(p)
q
q <- a$getinverse()
q
p
a <- makecacheMatrix(p)
a <- makeCacheMatrix(p)
a$get()
q <- cacheSolve(p)
source("cachematrix.R")
m1 <- matrix(1:16,4)
a<- makeCacheMatrix(m1)
a$get()
m2 <- a$getinverse()
m2
m2 <- a$setinverse()
source("cachematrix.R")
m1 <- matrix(1:16,4)
m1
a <- makeCacheMatrix(m1)
class(a)
class(m1)
m2 <- a$getinverse(m1)
m2 <- a$getinverse()
class(m2)
m2 <- cacheSolve(m1)
m2 <- cacheSolve()
m2 <- cacheSolve(a)
m2
m1
a
a$get()
a$set()
a$set(matrix(1:9,3))
a$get()
class(a)
a$getinverse()
class(m2)
m1
b <- cacheSolve(m1)
a$get()
a$getinverse()
a$setinverse()
cacheSolve(a)
m1 <- matrix(1:4,2)
a <- makeCacheMatrix(m1)
class(a)
b <- cacheSolve(m1)
cacheSolve(m1)
m1
m2 <- cacheSolve(m1)
m1 <- matrix(1:16,4)
m2 <- cacheSolve(m1)
a <- makeCacheMatrix(m1)
m2 <- cacheSolve(a)
cacheSolve(Matrix(1:4,2))
cacheSolve(matrix(1:4,2))
source("cachematrix.R")
a<- makeCacheMatrix(matrix(1:16,4))
class(a)
a$get()
a$getinverse()
a$setinverse()
source("cachematrix.R")
a<- makeCacheMatrix(matrix(1:16,4))
a$get()
a$getinverse()
a$setinverse()
b <- a$setinverse()
b
a<- makeCacheMatrix(matrix(1:16,4))
m1
m2 <- solve(m1)
m1 <- matrix(10:13,2)
m2 <- solve(m1)
m2
m1
a <- makeCacheMatrix(m1)
m2 <- a&getinverse()
a
m1
m2
m3 <- a$getinverse()
m3
m3 <- a$settinverse()
m3 <- a$setinverse()
m3
m1 <- matrix(1:4,2)
m2 <- solve(m1)
a <- makeCacheMatrix(m1)
m3 <- a$setinverse()
m3
m3 <- a$getinverse()
m3
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function() i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
